Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\kushal>
PS C:\Users\kushal> Set-Location "C:\Users\kushal\source\repos\AvoidMagicNumbers"; git clean -dfx; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\source\repos\AvoidMagicNumbers" -OutputFile "llm\dump.txt"; dotnet clean; dotnet build; dotnet run --project DemonstrationConsole; git add .; git commit --message "add dump"; git pull --rebase origin master; git push origin master;
Removing AntiPattern/bin/
Removing AntiPattern/obj/
Removing DemonstrationConsole/bin/
Removing DemonstrationConsole/obj/
Removing ModernApproach/bin/
Removing ModernApproach/obj/
Starting project export...
Project Path: C:\Users\kushal\source\repos\AvoidMagicNumbers
Output File: llm\dump.txt
Generating directory structure...
Collecting files...
Found 9 files to export
Processing (1/9): .github\workflows\build-and-test.yml
Processing (2/9): AntiPattern\AntiPattern.csproj
Processing (3/9): AntiPattern\RoleAssignmentService_BadWay.cs
Processing (4/9): AvoidMagicNumbers.slnx
Processing (5/9): DemonstrationConsole\DemonstrationConsole.csproj
Processing (6/9): DemonstrationConsole\Program.cs
Processing (7/9): ModernApproach\ModernApproach.csproj
Processing (8/9): ModernApproach\RoleAssignmentService_GoodWay.cs
Processing (9/9): README.md

Export completed successfully!
Output file: C:\Users\kushal\source\repos\AvoidMagicNumbers\llm\dump.txt
Total files exported: 9
Output file size: 0.06 MB
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.7s
Restore complete (0.6s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  AntiPattern succeeded with 1 warning(s) (2.0s) → AntiPattern\bin\Debug\net10.0\AntiPattern.dll
    C:\Users\kushal\source\repos\AvoidMagicNumbers\AntiPattern\RoleAssignmentService_BadWay.cs(18,39): warning CS8600: Converting null literal or possible null value to non-nullable type.
  ModernApproach succeeded (2.2s) → ModernApproach\bin\Debug\net10.0\ModernApproach.dll
  DemonstrationConsole succeeded (0.4s) → DemonstrationConsole\bin\Debug\net10.0\DemonstrationConsole.dll

Build succeeded with 1 warning(s) in 3.3s
=== ANTI-PATTERN: Magic Numbers in Loops ===
- for (int i = 6; i <= 7; i++) - what do these numbers mean?
- Hard-coded conditions based on loop counter values
- Business logic buried inside loop iteration
- Additional magic numbers scattered throughout (101, 202, 203, 25)

Assigning role type 6 (what role?) to user user123
  Executing InsertUserRole with 7 parameters
  Creating work assignment: Supervisor=manager-IT-DEPT, RoleCode=101, ResourceType=25
Assigning role type 7 (what role?) to user user123
  Executing InsertUserRole with 7 parameters
  Creating work assignment: Supervisor=coordinator-IT-DEPT, RoleCode=203, ResourceType=25

=== MODERN APPROACH: Type-Safe, Explicit Business Logic ===
Benefits of this refactored approach:
- Eliminates magic number loop entirely
- Strong types prevent parameter mix-ups at compile time
- Command objects replace loose parameter dictionaries
- Immutable records with clear business meaning
- Type-safe comparisons instead of string manipulation
- Each role assignment is explicit and testable

[INFO] Starting assignment of 2 roles for user user123 in department IT-DEPT
[INFO] Assigning Department Manager - oversees department operations to user user123
[REPO] Creating user role - RoleId: 22605096-4798-4e82-8a7a-f5d17e67a0ff, UserId: user123
[DEBUG] Successfully created role assignment 22605096-4798-4e82-8a7a-f5d17e67a0ff (DepartmentManager) for user user123 in 1.80ms
[REPO] Created work assignment - Supervisor: manager-IT-DEPT, Role: ProjectManager
[INFO] Assigning Project Coordinator - manages project workflows to user user123
[REPO] Creating user role - RoleId: 4a79f825-d18a-444b-961c-3e146ba80ac1, UserId: user123
[DEBUG] Successfully created role assignment 4a79f825-d18a-444b-961c-3e146ba80ac1 (ProjectCoordinator) for user user123 in 0.15ms
[REPO] Created work assignment - Supervisor: coordinator-IT-DEPT, Role: GeneralAdministrator
[INFO] Completed role assignment for user user123 - Success: 2, Failed: 0, Duration: 24.00ms

1. ELIMINATE MAGIC NUMBER LOOPS
   Replace: for (int i = 6; i <= 7; i++)
   With: foreach (var role in GetRequiredRoles())

2. USE DESCRIPTIVE ENUMS
   Replace: if (i == 6) // FOAOwner
   With: if (role.Type == SolicitationRoleType.FOAOwner)

3. CREATE STRONGLY-TYPED DOMAIN OBJECTS
   Replace: string userId, string departmentId
   With: UserId userId, DepartmentId departmentId

4. USE COMMAND OBJECTS INSTEAD OF DICTIONARIES
   Replace: parameters.Add("UserId", userId)
   With: new CreateUserRoleCommand(userId, departmentId, ...)

5. LEVERAGE COMPILE-TIME TYPE SAFETY
   Replace: String comparisons and casting
   With: Record equality and strong typing

This pattern applies to your dependency injection work:
- Replace ServiceFactory static calls with injected dependencies
- Make configuration paths explicit parameters
- Use constructor injection instead of hidden factory dependencies
warning: in the working copy of 'llm/dump.txt', LF will be replaced by CRLF the next time Git touches it
[master 428ef63] add dump
 1 file changed, 2 insertions(+), 2 deletions(-)
From https://github.com/collabskus/AvoidMagicNumbers
 * branch            master     -> FETCH_HEAD
Current branch master is up to date.
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 352 bytes | 352.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/collabskus/AvoidMagicNumbers.git
   84e5210..428ef63  master -> master
PS C:\Users\kushal\source\repos\AvoidMagicNumbers> Set-Location "C:\Users\kushal\source\repos\AvoidMagicNumbers"; git clean -dfx; Get-Content "Export-Project.ps1"; .\Export-Project.ps1 -ProjectPath "C:\Users\kushal\source\repos\AvoidMagicNumbers" -OutputFile "llm\dump.txt"; dotnet clean; dotnet build; dotnet run --project DemonstrationConsole; git add .; git commit --message "add dump"; git pull --rebase origin master; git push origin master;
Removing AntiPattern/bin/
Removing AntiPattern/obj/
Removing DemonstrationConsole/bin/
Removing DemonstrationConsole/obj/
Removing ModernApproach/bin/
Removing ModernApproach/obj/
Removing llm/Windows PowerShell.txt
# Export ASP.NET Project Files to Single Text File
# PowerShell 5 compatible script

param(
    [string]$ProjectPath = ".",
    [string]$OutputFile = "project_export.txt"
)

# Define file extensions to include
$IncludeExtensions = @(
    "*.cs",           # C# files
    "*.json",         # JSON configuration files
    "*.md",           # Markdown files
    "*.txt",          # Text files
    "*.xml",          # XML files
    "*.csproj",       # C# project files
    "*.sln",          # Solution files
    "*.slnx",         # new solution file in vs 2026
    "*.config",       # Configuration files
    "*.cshtml",       # Razor views
    "*.razor",        # Razor components
    "*.js",           # JavaScript files
    "*.css",          # CSS files
    "*.scss",         # SCSS files
    "*.html",         # HTML files
    "*.yml",          # YAML files
    "*.yaml",         # YAML files
    "*.sql"           # SQL files
)

# Directories to exclude
$ExcludeDirectories = @(
    "bin",
    "obj",
    ".vs",
    ".git",
    "node_modules",
    "packages",
    ".vscode",
    ".idea"
)

# Files to exclude
$ExcludeFiles = @(
    "*.exe",
    "*.dll",
    "*.pdb",
    "*.cache",
    "*.log",
    "dump.txt"
)

Write-Host "Starting project export..." -ForegroundColor Green
Write-Host "Project Path: $ProjectPath" -ForegroundColor Yellow
Write-Host "Output File: $OutputFile" -ForegroundColor Yellow

# Initialize output file
$OutputPath = Join-Path $ProjectPath $OutputFile
"" | Out-File -FilePath $OutputPath -Encoding UTF8

# Add header
$Header = @"
===============================================================================
ASP.NET PROJECT EXPORT
Generated: $(Get-Date)
Project Path: $((Resolve-Path $ProjectPath).Path)
===============================================================================

"@

$Header | Out-File -FilePath $OutputPath -Append -Encoding UTF8

# Generate directory structure using tree command if available, otherwise use PowerShell
Write-Host "Generating directory structure..." -ForegroundColor Cyan

"DIRECTORY STRUCTURE:" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
"===================" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
"" | Out-File -FilePath $OutputPath -Append -Encoding UTF8

# Try to use tree command first
try {
    $treeOutput = & tree $ProjectPath /F /A 2>$null
    if ($LASTEXITCODE -eq 0) {
        $treeOutput | Out-File -FilePath $OutputPath -Append -Encoding UTF8
    } else {
        throw "Tree command failed"
    }
} catch {
    # Fallback to PowerShell-based tree
    Write-Host "Tree command not available, using PowerShell alternative..." -ForegroundColor Yellow

    function Get-DirectoryTree {
        param([string]$Path, [string]$Prefix = "")

        $items = Get-ChildItem -Path $Path -Force | Where-Object {
            $_.Name -notin $ExcludeDirectories
        } | Sort-Object @{Expression={$_.PSIsContainer}; Descending=$true}, Name

        for ($i = 0; $i -lt $items.Count; $i++) {
            $item = $items[$i]
            $isLast = ($i -eq $items.Count - 1)
            $connector = if ($isLast) { "+-- " } else { "+-- " }

            "$Prefix$connector$($item.Name)" | Out-File -FilePath $OutputPath -Append -Encoding UTF8

            if ($item.PSIsContainer) {
                $newPrefix = if ($isLast) { "$Prefix    " } else { "$Prefix|   " }
                Get-DirectoryTree -Path $item.FullName -Prefix $newPrefix
            }
        }
    }

    (Split-Path $ProjectPath -Leaf) | Out-File -FilePath $OutputPath -Append -Encoding UTF8
    Get-DirectoryTree -Path $ProjectPath
}

"" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
"" | Out-File -FilePath $OutputPath -Append -Encoding UTF8

# Get all relevant files
Write-Host "Collecting files..." -ForegroundColor Cyan

$AllFiles = @()
foreach ($extension in $IncludeExtensions) {
    $files = Get-ChildItem -Path $ProjectPath -Recurse -Include $extension -File | Where-Object {
        $exclude = $false

        # Check excluded directories
        foreach ($excludeDir in $ExcludeDirectories) {
            if ($_.FullName -like "*\$excludeDir\*") {
                $exclude = $true
                break
            }
        }

        # Check excluded files (this was missing!)
        if (-not $exclude) {
            foreach ($excludeFile in $ExcludeFiles) {
                if ($_.Name -like $excludeFile) {
                    $exclude = $true
                    break
                }
            }
        }

        # Also exclude the output file specifically
        if (-not $exclude -and $_.FullName -eq $OutputPath) {
            $exclude = $true
        }

        -not $exclude
    }
    $AllFiles += $files
}

# Remove duplicates and sort
$AllFiles = $AllFiles | Sort-Object FullName | Get-Unique -AsString

Write-Host "Found $($AllFiles.Count) files to export" -ForegroundColor Green

# Export each file
"FILE CONTENTS:" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
"==============" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
"" | Out-File -FilePath $OutputPath -Append -Encoding UTF8

$fileCount = 0
foreach ($file in $AllFiles) {
    $fileCount++
    $relativePath = $file.FullName.Substring($ProjectPath.Length).TrimStart('\')

    Write-Host "Processing ($fileCount/$($AllFiles.Count)): $relativePath" -ForegroundColor White

    $separator = "=" * 80
    $fileHeader = @"
$separator
FILE: $relativePath
SIZE: $([math]::Round($file.Length / 1KB, 2)) KB
MODIFIED: $($file.LastWriteTime)
$separator

"@

    $fileHeader | Out-File -FilePath $OutputPath -Append -Encoding UTF8

    try {
        # Read file content with error handling
        $content = Get-Content -Path $file.FullName -Raw -ErrorAction Stop
        if ($content) {
            $content | Out-File -FilePath $OutputPath -Append -Encoding UTF8
        } else {
            "[EMPTY FILE]" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
        }
    } catch {
        "[ERROR READING FILE: $($_.Exception.Message)]" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
    }

    "" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
    "" | Out-File -FilePath $OutputPath -Append -Encoding UTF8
}

# Add footer
$Footer = @"
===============================================================================
EXPORT COMPLETED: $(Get-Date)
Total Files Exported: $fileCount
Output File: $OutputPath
===============================================================================
"@

$Footer | Out-File -FilePath $OutputPath -Append -Encoding UTF8

Write-Host "`nExport completed successfully!" -ForegroundColor Green
Write-Host "Output file: $OutputPath" -ForegroundColor Yellow
Write-Host "Total files exported: $fileCount" -ForegroundColor Green

# Display file size
$outputFileInfo = Get-Item $OutputPath
Write-Host "Output file size: $([math]::Round($outputFileInfo.Length / 1MB, 2)) MB" -ForegroundColor Cyan
Starting project export...
Project Path: C:\Users\kushal\source\repos\AvoidMagicNumbers
Output File: llm\dump.txt
Generating directory structure...
Collecting files...
Found 9 files to export
Processing (1/9): .github\workflows\build-and-test.yml
Processing (2/9): AntiPattern\AntiPattern.csproj
Processing (3/9): AntiPattern\RoleAssignmentService_BadWay.cs
Processing (4/9): AvoidMagicNumbers.slnx
Processing (5/9): DemonstrationConsole\DemonstrationConsole.csproj
Processing (6/9): DemonstrationConsole\Program.cs
Processing (7/9): ModernApproach\ModernApproach.csproj
Processing (8/9): ModernApproach\RoleAssignmentService_GoodWay.cs
Processing (9/9): README.md

Export completed successfully!
Output file: C:\Users\kushal\source\repos\AvoidMagicNumbers\llm\dump.txt
Total files exported: 9
Output file size: 0.06 MB
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy

Build succeeded in 0.4s
Restore complete (0.6s)
    info NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  ModernApproach succeeded (0.3s) → ModernApproach\bin\Debug\net10.0\ModernApproach.dll
  AntiPattern succeeded with 1 warning(s) (0.3s) → AntiPattern\bin\Debug\net10.0\AntiPattern.dll
    C:\Users\kushal\source\repos\AvoidMagicNumbers\AntiPattern\RoleAssignmentService_BadWay.cs(18,39): warning CS8600: Converting null literal or possible null value to non-nullable type.
  DemonstrationConsole succeeded (0.2s) → DemonstrationConsole\bin\Debug\net10.0\DemonstrationConsole.dll

Build succeeded with 1 warning(s) in 1.3s
=== ANTI-PATTERN: Magic Numbers in Loops ===
- for (int i = 6; i <= 7; i++) - what do these numbers mean?
- Hard-coded conditions based on loop counter values
- Business logic buried inside loop iteration
- Additional magic numbers scattered throughout (101, 202, 203, 25)

Assigning role type 6 (what role?) to user user123
  Executing InsertUserRole with 7 parameters
  Creating work assignment: Supervisor=manager-IT-DEPT, RoleCode=101, ResourceType=25
Assigning role type 7 (what role?) to user user123
  Executing InsertUserRole with 7 parameters
  Creating work assignment: Supervisor=coordinator-IT-DEPT, RoleCode=203, ResourceType=25

=== MODERN APPROACH: Type-Safe, Explicit Business Logic ===
Benefits of this refactored approach:
- Eliminates magic number loop entirely
- Strong types prevent parameter mix-ups at compile time
- Command objects replace loose parameter dictionaries
- Immutable records with clear business meaning
- Type-safe comparisons instead of string manipulation
- Each role assignment is explicit and testable

[INFO] Starting assignment of 2 roles for user user123 in department IT-DEPT
[INFO] Assigning Department Manager - oversees department operations to user user123
[REPO] Creating user role - RoleId: 7bbcc97c-cc7d-4249-b522-a501b5e294b6, UserId: user123
[DEBUG] Successfully created role assignment 7bbcc97c-cc7d-4249-b522-a501b5e294b6 (DepartmentManager) for user user123 in 1.81ms
[REPO] Created work assignment - Supervisor: manager-IT-DEPT, Role: ProjectManager
[INFO] Assigning Project Coordinator - manages project workflows to user user123
[REPO] Creating user role - RoleId: 82ceee0a-e210-4fa0-ad4a-ebf3ee3fc425, UserId: user123
[DEBUG] Successfully created role assignment 82ceee0a-e210-4fa0-ad4a-ebf3ee3fc425 (ProjectCoordinator) for user user123 in 0.17ms
[REPO] Created work assignment - Supervisor: coordinator-IT-DEPT, Role: GeneralAdministrator
[INFO] Completed role assignment for user user123 - Success: 2, Failed: 0, Duration: 25.32ms

1. ELIMINATE MAGIC NUMBER LOOPS
   Replace: for (int i = 6; i <= 7; i++)
   With: foreach (var role in GetRequiredRoles())

2. USE DESCRIPTIVE ENUMS
   Replace: if (i == 6) // FOAOwner
   With: if (role.Type == SolicitationRoleType.FOAOwner)

3. CREATE STRONGLY-TYPED DOMAIN OBJECTS
   Replace: string userId, string departmentId
   With: UserId userId, DepartmentId departmentId

4. USE COMMAND OBJECTS INSTEAD OF DICTIONARIES
   Replace: parameters.Add("UserId", userId)
   With: new CreateUserRoleCommand(userId, departmentId, ...)

5. LEVERAGE COMPILE-TIME TYPE SAFETY
   Replace: String comparisons and casting
   With: Record equality and strong typing

This pattern applies to your dependency injection work:
- Replace ServiceFactory static calls with injected dependencies
- Make configuration paths explicit parameters
- Use constructor injection instead of hidden factory dependencies
warning: in the working copy of 'llm/dump.txt', LF will be replaced by CRLF the next time Git touches it
[master 7376cd1] add dump
 1 file changed, 2 insertions(+), 2 deletions(-)
From https://github.com/collabskus/AvoidMagicNumbers
 * branch            master     -> FETCH_HEAD
Current branch master is up to date.
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 337 bytes | 337.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/collabskus/AvoidMagicNumbers.git
   428ef63..7376cd1  master -> master
PS C:\Users\kushal\source\repos\AvoidMagicNumbers>
